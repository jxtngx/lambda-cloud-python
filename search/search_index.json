{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lambda Cloud Python","text":"<p>A simple Python client for the Lambda Cloud API, built with httpx.</p> <p>[!NOTE] This library is not an official Lambda Labs project</p> <p>[!NOTE] This library is developed alongside GitHub Copilot and various AI models by OpenAI and Anthropic</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#installation-via-pypi","title":"Installation via PyPI","text":"<pre><code>pip install lambda-cloud-python\n</code></pre>"},{"location":"#installation-from-source","title":"Installation from source","text":"<pre><code>git clone https://github.com/jxtngx/lambda-cloud-python.git\ncd lambda-cloud-python\npip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>[!NOTE] see docs for more examples</p> <p>The Lambda Cloud Python client provides the following functionality:</p>"},{"location":"#instances","title":"Instances","text":"<ul> <li><code>instances.list()</code> - Get all instances for the account</li> <li><code>instances.get(instance_id)</code> - Get details for a specific instance</li> <li><code>instances.update(instance_id, ...)</code> - Update details of a specific instance</li> <li><code>instances.launch(...)</code> - Launch one or more new instances</li> <li><code>instances.restart(instance_ids)</code> - Start one or more instances</li> <li><code>instances.terminate(instance_ids)</code> - Terminate one or more instances</li> </ul>"},{"location":"#instance-types","title":"Instance Types","text":"<ul> <li><code>instance_types.list()</code> - Get available instance types and their specifications</li> </ul>"},{"location":"#ssh-keys","title":"SSH Keys","text":"<ul> <li><code>ssh_keys.list()</code> - Get all SSH keys for the account</li> <li><code>ssh_keys.add(name, public_key)</code> - Add a new SSH key</li> <li><code>ssh_keys.delete(name)</code> - Delete an SSH key</li> </ul>"},{"location":"#file-systems","title":"File Systems","text":"<ul> <li><code>file_systems.list()</code> - Get all file systems for the account</li> <li><code>file_systems.create(...)</code> - Create a new file system</li> <li><code>file_systems.delete(name)</code> - Delete a file system</li> </ul>"},{"location":"#images","title":"Images","text":"<ul> <li><code>images.list()</code> - List available machine images</li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>This document details how authentication works with the Lambda Cloud Python client.</p>"},{"location":"authentication/#overview","title":"Overview","text":"<p>The Lambda Cloud API uses API keys for authentication. These keys are used to identify and authorize your requests.</p>"},{"location":"authentication/#obtaining-an-api-key","title":"Obtaining an API Key","text":"<p>To obtain an API key for Lambda Cloud:</p> <ol> <li>Log in to your Lambda Cloud account</li> <li>Navigate to the API Keys page (https://cloud.lambdalabs.com/api-keys)</li> <li>Generate a new API key</li> <li>Copy and securely store the key immediately - it will only be shown once</li> </ol>"},{"location":"authentication/#client-authentication","title":"Client Authentication","text":"<p>The Lambda Cloud Python client accepts your API key during initialization and handles authentication for all subsequent API calls.</p> <pre><code>from lambda_cloud import LambdaCloudClient\n\n# Initialize with your API key\nclient = LambdaCloudClient(api_key=\"your-api-key\")\n\n# Now all operations will be authenticated automatically\n</code></pre>"},{"location":"authentication/#authentication-methods","title":"Authentication Methods","text":"<p>The client uses Bearer token authentication by default, which includes your API key in the Authorization header for each request:</p> <pre><code>Authorization: Bearer &lt;API-KEY&gt;\n</code></pre> <p>The underlying HTTP client is configured during initialization, so you don't need to manually handle authentication details.</p>"},{"location":"authentication/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Store API keys securely: Don't hardcode them in your scripts or commit them to version control</li> <li>Use environment variables: Store your API key in an environment variable and access it in your code</li> <li>Set appropriate permissions: If possible, use API keys with the minimum required permissions</li> <li>Rotate keys regularly: Generate new API keys periodically and revoke old ones</li> <li>Use separate keys: For different applications or environments, use different API keys</li> </ol>"},{"location":"authentication/#example-using-environment-variables","title":"Example: Using Environment Variables","text":"<pre><code>import os\nfrom lambda_cloud import LambdaCloudClient\n\n# Get API key from environment variable\napi_key = os.environ.get(\"LAMBDA_API_KEY\")\n\nif not api_key:\n    raise ValueError(\"LAMBDA_API_KEY environment variable is not set\")\n\n# Initialize client with the API key\nclient = LambdaCloudClient(api_key=api_key)\n\n# Now you can use the client\n</code></pre>"},{"location":"authentication/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant User as Your Application\n    participant Client as LambdaCloudClient\n    participant API as Lambda Cloud API\n\n    User-&gt;&gt;Client: Initialize(api_key)\n    Client-&gt;&gt;Client: Store API key in headers\n    User-&gt;&gt;Client: Make API request\n    Client-&gt;&gt;API: Request with Authorization header\n    API-&gt;&gt;API: Validate API key\n    API-&gt;&gt;Client: Return response\n    Client-&gt;&gt;User: Return data</code></pre>"},{"location":"filesystems/","title":"FileSystems","text":"<p>This document details the operations available for managing filesystems in Lambda Cloud through the Python client.</p>"},{"location":"filesystems/#endpoint-overview","title":"Endpoint Overview","text":"<p>The FileSystems module provides methods for managing persistent storage:</p> <ul> <li>List all filesystems in your account</li> <li>Create a new filesystem</li> <li>Delete an existing filesystem</li> </ul>"},{"location":"filesystems/#filesystem-lifecycle","title":"Filesystem Lifecycle","text":"<pre><code>graph TD\n    A[Create Filesystem] --&gt; B[Mount to Instance]\n    B --&gt; C[Store Data]\n    B --&gt; D[Unmount from Instance]\n    D --&gt; E[Delete Filesystem]\n    D --&gt; F[Mount to Another Instance]</code></pre>"},{"location":"filesystems/#usage-examples","title":"Usage Examples","text":""},{"location":"filesystems/#listing-filesystems","title":"Listing FileSystems","text":"<pre><code>from lambda_cloud import LambdaCloudClient, FileSystems\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfilesystems = FileSystems(client)\n\n# Get all filesystems\nfs_list = filesystems.list()\n\n# Display filesystem details\nfor fs in fs_list:\n    status = \"In use\" if fs[\"is_in_use\"] else \"Not in use\"\n    region = fs[\"region\"][\"name\"]\n\n    print(f\"Filesystem: {fs['name']} (ID: {fs['id']})\")\n    print(f\"  Status: {status}\")\n    print(f\"  Region: {region}\")\n    print(f\"  Mount point: {fs['mount_point']}\")\n\n    # If bytes_used is available, show storage usage\n    if \"bytes_used\" in fs:\n        gb_used = fs[\"bytes_used\"] / (1024 * 1024 * 1024)\n        print(f\"  Storage used: {gb_used:.2f} GB\")\n\n    print(f\"  Created: {fs['created']}\")\n    print(f\"  Created by: {fs['created_by']['email']}\")\n    print(\"\")\n</code></pre>"},{"location":"filesystems/#creating-a-filesystem","title":"Creating a Filesystem","text":"<pre><code>from lambda_cloud import LambdaCloudClient, FileSystems\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfilesystems = FileSystems(client)\n\n# Create a new filesystem in a specific region\nname = \"ml-datasets\"  # Must start with a letter and contain only alphanumeric chars and hyphens\nregion = \"us-west-1\"  # Specify the region code\n\nnew_fs = filesystems.create(name, region)\n\nprint(f\"Created filesystem: {new_fs['name']} (ID: {new_fs['id']})\")\nprint(f\"Mount point: {new_fs['mount_point']}\")\nprint(f\"Region: {new_fs['region']['name']}\")\n</code></pre>"},{"location":"filesystems/#deleting-a-filesystem","title":"Deleting a Filesystem","text":"<pre><code>from lambda_cloud import LambdaCloudClient, FileSystems\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfilesystems = FileSystems(client)\n\n# Delete a filesystem by ID\n# Note: The filesystem must not be attached to any instances\nfilesystem_id = \"AN_ID\"\n\ntry:\n    result = filesystems.delete(filesystem_id)\n    print(f\"Deleted filesystem IDs: {result['deleted_ids']}\")\nexcept Exception as e:\n    print(f\"Error deleting filesystem: {e}\")\n    print(\"If the filesystem is in use, detach it from all instances first.\")\n</code></pre>"},{"location":"filesystems/#complete-workflow-create-and-use-filesystem","title":"Complete Workflow: Create and Use Filesystem","text":"<pre><code>from lambda_cloud import LambdaCloudClient, FileSystems, Instances\nimport time\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfilesystems = FileSystems(client)\ninstances = Instances(client)\n\n# Step 1: Create filesystem\nfs_name = \"project-data\"\nregion = \"us-west-1\"\nnew_fs = filesystems.create(fs_name, region)\nfs_id = new_fs[\"id\"]\n\nprint(f\"Created filesystem: {new_fs['name']} (ID: {fs_id})\")\nprint(f\"Mount point: {new_fs['mount_point']}\")\n\n# Step 2: Launch instance with the filesystem attached\nresult = instances.launch(\n    region_name=region,  # Must be the same region as the filesystem\n    instance_type_name=\"gpu_1x_a10\",\n    ssh_key_names=[\"my-ssh-key\"],\n    name=\"ML Instance with Data\",\n    file_system_names=[fs_name],\n)\n\ninstance_id = result[\"instance_ids\"][0]\nprint(f\"Launched instance: {instance_id}\")\n\n# Wait for instance to be active\ntime.sleep(60)  # Simple wait - in production, implement polling\n\n# Step 3: Verify instance details with attached filesystem\ninstance = instances.get(instance_id)\n\nprint(f\"Instance {instance['name']} is {instance['status']}\")\nprint(f\"Attached filesystems: {instance['file_system_names']}\")\nprint(f\"To connect: ssh ubuntu@{instance['ip']}\")\nprint(f\"Filesystem is available at: {new_fs['mount_point']}\")\n</code></pre>"},{"location":"firewall_rules/","title":"Firewall Rules","text":"<p>This document details the operations available for managing firewall rules in Lambda Cloud through the Python client.</p>"},{"location":"firewall_rules/#endpoint-overview","title":"Endpoint Overview","text":"<p>The FirewallRules module provides methods for controlling inbound traffic to your instances:</p> <ul> <li>List current inbound firewall rules</li> <li>Replace all inbound firewall rules with a new set</li> </ul> <p>Note: Firewall rules do not apply to the us-south-1 region.</p>"},{"location":"firewall_rules/#firewall-rule-concepts","title":"Firewall Rule Concepts","text":"<p>Firewall rules in Lambda Cloud control inbound traffic to your instances. Each rule specifies:</p> <ul> <li>Protocol (tcp, udp, icmp, or all)</li> <li>Port range (for tcp, udp, and all protocols)</li> <li>Source network in CIDR notation (e.g., 0.0.0.0/0 for any IP)</li> <li>Description</li> </ul> <p>When you replace the rules, you replace the entire set at once. There is no way to add or remove individual rules.</p>"},{"location":"firewall_rules/#usage-examples","title":"Usage Examples","text":""},{"location":"firewall_rules/#listing-firewall-rules","title":"Listing Firewall Rules","text":"<pre><code>from lambda_cloud import LambdaCloudClient, FirewallRules\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfirewall = FirewallRules(client)\n\n# Get all current firewall rules\nrules = firewall.list()\n\n# Display rule details\nfor rule in rules:\n    protocol = rule[\"protocol\"]\n    source = rule[\"source_network\"]\n    description = rule[\"description\"]\n\n    # Port range is only applicable for tcp, udp, and all protocols\n    if \"port_range\" in rule:\n        start_port, end_port = rule[\"port_range\"]\n        if start_port == end_port:\n            port_info = f\"port {start_port}\"\n        else:\n            port_info = f\"ports {start_port}-{end_port}\"\n        print(f\"Rule: Allow {protocol} {port_info} from {source} ({description})\")\n    else:\n        print(f\"Rule: Allow {protocol} from {source} ({description})\")\n</code></pre>"},{"location":"firewall_rules/#replacing-firewall-rules","title":"Replacing Firewall Rules","text":"<pre><code>from lambda_cloud import LambdaCloudClient, FirewallRules\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfirewall = FirewallRules(client)\n\n# Define a new set of rules\nnew_rules = [\n    # Allow SSH from anywhere\n    {\n        \"protocol\": \"tcp\",\n        \"port_range\": [22, 22],\n        \"source_network\": \"0.0.0.0/0\",\n        \"description\": \"Allow SSH from anywhere\",\n    },\n    # Allow HTTP and HTTPS from anywhere\n    {\n        \"protocol\": \"tcp\",\n        \"port_range\": [80, 80],\n        \"source_network\": \"0.0.0.0/0\",\n        \"description\": \"Allow HTTP from anywhere\",\n    },\n    {\n        \"protocol\": \"tcp\",\n        \"port_range\": [443, 443],\n        \"source_network\": \"0.0.0.0/0\",\n        \"description\": \"Allow HTTPS from anywhere\",\n    },\n    # Allow a custom port range from a specific IP range\n    {\n        \"protocol\": \"tcp\",\n        \"port_range\": [8000, 8100],\n        \"source_network\": \"192.168.1.0/24\",\n        \"description\": \"Allow custom ports from office network\",\n    },\n    # Allow ICMP (ping) from anywhere\n    {\"protocol\": \"icmp\", \"source_network\": \"0.0.0.0/0\", \"description\": \"Allow ping from anywhere\"},\n]\n\n# Replace all existing rules with the new set\nupdated_rules = firewall.replace(new_rules)\n\nprint(f\"Updated firewall with {len(updated_rules)} rules\")\n</code></pre>"},{"location":"firewall_rules/#restricting-access-to-your-ip-only","title":"Restricting Access to Your IP Only","text":"<pre><code>import requests\nfrom lambda_cloud import LambdaCloudClient, FirewallRules\n\n# Get your current public IP\nmy_ip = requests.get(\"https://api.ipify.org\").text\nmy_ip_cidr = f\"{my_ip}/32\"  # Convert to CIDR notation\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nfirewall = FirewallRules(client)\n\n# Define rules that only allow access from your IP\nsecure_rules = [\n    # Allow SSH from your IP only\n    {\n        \"protocol\": \"tcp\",\n        \"port_range\": [22, 22],\n        \"source_network\": my_ip_cidr,\n        \"description\": f\"Allow SSH from my IP ({my_ip})\",\n    },\n    # Allow JupyterLab from your IP only\n    {\n        \"protocol\": \"tcp\",\n        \"port_range\": [8888, 8888],\n        \"source_network\": my_ip_cidr,\n        \"description\": f\"Allow JupyterLab from my IP ({my_ip})\",\n    },\n]\n\n# Replace all existing rules\nupdated_rules = firewall.replace(secure_rules)\n\nprint(f\"Updated firewall to only allow access from {my_ip}\")\nfor rule in updated_rules:\n    if \"port_range\" in rule:\n        print(f\"- {rule['protocol']} ports {rule['port_range'][0]}-{rule['port_range'][1]} ({rule['description']})\")\n    else:\n        print(f\"- {rule['protocol']} ({rule['description']})\")\n</code></pre>"},{"location":"firewall_rules/#common-firewall-configurations","title":"Common Firewall Configurations","text":"<pre><code>graph TD\n    A[Firewall Configurations] --&gt; B[Default/Basic]\n    A --&gt; C[Development]\n    A --&gt; D[Secure/Production]\n\n    B --&gt; B1[SSH Port 22]\n    B --&gt; B2[ICMP/Ping]\n\n    C --&gt; C1[SSH Port 22]\n    C --&gt; C2[HTTP Port 80]\n    C --&gt; C3[HTTPS Port 443]\n    C --&gt; C4[Custom App Ports]\n\n    D --&gt; D1[SSH from specific IPs only]\n    D --&gt; D2[HTTPS from specific IPs only]\n    D --&gt; D3[No direct HTTP]</code></pre>"},{"location":"images/","title":"Machine Images","text":"<p>This document details the operations available for working with machine images in Lambda Cloud through the Python client.</p>"},{"location":"images/#endpoint-overview","title":"Endpoint Overview","text":"<p>The Images module provides methods for retrieving information about available machine images:</p> <ul> <li>List all available machine images by region</li> </ul>"},{"location":"images/#image-concepts","title":"Image Concepts","text":"<p>Lambda Cloud images are used as the base operating system when launching instances. Each image belongs to a particular family and has a specific version. Images are available in different regions.</p>"},{"location":"images/#usage-examples","title":"Usage Examples","text":""},{"location":"images/#listing-available-images","title":"Listing Available Images","text":"<pre><code>from lambda_cloud import LambdaCloudClient, Images\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nimages = Images(client)\n\n# Get all available images\navailable_images = images.list()\n\n# Display image details\nfor img in available_images:\n    print(f\"Image: {img['name']} (ID: {img['id']})\")\n    print(f\"  Description: {img['description']}\")\n    print(f\"  Family: {img['family']}\")\n    print(f\"  Version: {img['version']}\")\n    print(f\"  Architecture: {img['architecture']}\")\n    print(f\"  Region: {img['region']['name']} ({img['region']['description']})\")\n    print(f\"  Created: {img['created_time']}\")\n    print(f\"  Updated: {img['updated_time']}\")\n    print(\"\")\n</code></pre>"},{"location":"images/#finding-images-by-family","title":"Finding Images by Family","text":"<pre><code>from lambda_cloud import LambdaCloudClient, Images\nfrom collections import defaultdict\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nimages = Images(client)\n\n# Get all available images\navailable_images = images.list()\n\n# Group images by family\nfamilies = defaultdict(list)\nfor img in available_images:\n    families[img[\"family\"]].append(img)\n\n# Display available families and images\nprint(\"Available Image Families:\")\nfor family, images in families.items():\n    print(f\"\\nFamily: {family}\")\n\n    # Group by region\n    by_region = defaultdict(list)\n    for img in images:\n        region = img[\"region\"][\"name\"]\n        by_region[region].append(img)\n\n    # Display by region\n    for region, region_images in by_region.items():\n        print(f\"  Region: {region}\")\n        for img in region_images:\n            print(f\"    - {img['name']} (v{img['version']}, {img['architecture']})\")\n</code></pre>"},{"location":"images/#using-images-when-launching-instances","title":"Using Images when Launching Instances","text":"<pre><code>from lambda_cloud import LambdaCloudClient, Images, Instances\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nimages = Images(client)\ninstances = Instances(client)\n\n# First, list available images to find one we want\navailable_images = images.list()\n\n# Find a specific image by family and region\ntarget_family = \"lambda-stack\"\ntarget_region = \"us-west-1\"\ntarget_arch = \"x86_64\"\n\n# Find matching images\nmatching_images = [\n    img\n    for img in available_images\n    if img[\"family\"] == target_family and img[\"region\"][\"name\"] == target_region and img[\"architecture\"] == target_arch\n]\n\nif matching_images:\n    # Sort by creation time to get the latest\n    latest_image = sorted(matching_images, key=lambda x: x[\"created_time\"], reverse=True)[0]\n\n    print(f\"Found image: {latest_image['name']} (ID: {latest_image['id']})\")\n\n    # Launch an instance with this image\n    result = instances.launch(\n        region_name=target_region,\n        instance_type_name=\"gpu_1x_a10\",\n        ssh_key_names=[\"my-ssh-key\"],\n        name=\"Instance with Custom Image\",\n        # Specify image by ID\n        image={\"id\": latest_image[\"id\"]}\n        # Alternative: specify by family\n        # image={\"family\": target_family}\n    )\n\n    print(f\"Launched instance with ID: {result['instance_ids'][0]}\")\nelse:\n    print(f\"No matching images found for family '{target_family}' in region '{target_region}'\")\n</code></pre>"},{"location":"images/#image-types-and-relationships","title":"Image Types and Relationships","text":"<pre><code>graph TD\n    A[Image Families] --&gt; B[lambda-stack]\n    A --&gt; C[ubuntu-jammy]\n    A --&gt; D[ubuntu-focal]\n    A --&gt; E[Other families]\n\n    B --&gt; F[Latest lambda-stack]\n    B --&gt; G[Previous versions]\n\n    F --&gt; H[x86_64 Architecture]\n    F --&gt; I[arm64 Architecture]\n\n    H --&gt; J[us-west-1 Region]\n    H --&gt; K[us-east-1 Region]\n    H --&gt; L[Other Regions]</code></pre>"},{"location":"instance_types/","title":"Instance Types","text":"<p>This document details the operations available for working with Lambda Cloud instance types through the Python client.</p>"},{"location":"instance_types/#endpoint-overview","title":"Endpoint Overview","text":"<p>The InstanceTypes module provides methods for retrieving information about available instance types in Lambda Cloud:</p> <ul> <li>List available instance types with specifications and availability</li> </ul>"},{"location":"instance_types/#available-instance-types","title":"Available Instance Types","text":"<p>The specific types available in Lambda Cloud vary over time as new hardware is added. The client will always provide the most up-to-date information about available types. Common GPU types include:</p> <ul> <li>H100</li> <li>A10</li> <li>A100</li> <li>GH200</li> <li>L4</li> <li>L40</li> </ul>"},{"location":"instance_types/#usage-examples","title":"Usage Examples","text":""},{"location":"instance_types/#listing-instance-types","title":"Listing Instance Types","text":"<pre><code>from lambda_cloud import LambdaCloudClient, InstanceTypes\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\ninstance_types = InstanceTypes(client)\n\n# Get all available instance types\navailable_types = instance_types.list()\n\n# Process and display the instance types\nfor type_name, details in available_types.items():\n    # Get the specifications\n    specs = details[\"instance_type\"][\"specs\"]\n    price_per_hour = details[\"instance_type\"][\"price_cents_per_hour\"] / 100\n\n    # Display the information\n    print(f\"Instance Type: {type_name}\")\n    print(f\"  Description: {details['instance_type']['description']}\")\n    print(f\"  GPU: {details['instance_type']['gpu_description']}\")\n    print(f\"  Price: ${price_per_hour}/hour\")\n    print(f\"  Specs:\")\n    print(f\"    CPUs: {specs['vcpus']}\")\n    print(f\"    Memory: {specs['memory_gib']} GiB\")\n    print(f\"    Storage: {specs['storage_gib']} GiB\")\n    print(f\"    GPUs: {specs['gpus']}\")\n\n    # Show availability by region\n    print(\"  Available in regions:\")\n    for region in details[\"regions_with_capacity_available\"]:\n        print(f\"    - {region['name']} ({region['description']})\")\n    print(\"\")\n</code></pre>"},{"location":"instance_types/#checking-availability-in-a-specific-region","title":"Checking Availability in a Specific Region","text":"<pre><code>from lambda_cloud import LambdaCloudClient, InstanceTypes\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\ninstance_types = InstanceTypes(client)\n\n# Get all available instance types\navailable_types = instance_types.list()\n\n# Check for the specific type and region you want\ntarget_type = \"gpu_8x_a100\"\ntarget_region = \"us-west-1\"\n\nif target_type in available_types:\n    regions_available = [r[\"name\"] for r in available_types[target_type][\"regions_with_capacity_available\"]]\n\n    if target_region in regions_available:\n        print(f\"{target_type} is available in {target_region}!\")\n        price = available_types[target_type][\"instance_type\"][\"price_cents_per_hour\"] / 100\n        print(f\"Price: ${price}/hour\")\n    else:\n        print(f\"{target_type} is not available in {target_region}\")\n        print(f\"It is available in: {regions_available}\")\nelse:\n    print(f\"{target_type} is not an available instance type\")\n</code></pre>"},{"location":"instance_types/#instance-type-categories","title":"Instance Type Categories","text":"<pre><code>graph TD\n    A[Lambda Cloud Instance Types] --&gt; B[Single GPU]\n    A --&gt; C[Multi GPU]\n    B --&gt; D[A10]\n    B --&gt; E[L4]\n    B --&gt; F[GH200]\n    C --&gt; G[A100 - 4x/8x]\n    C --&gt; H[H100 - 8x]\n    C --&gt; I[Custom configurations]</code></pre>"},{"location":"instances/","title":"Instance Operations","text":"<p>Instances are virtual machines that run on Lambda Cloud's infrastructure. The <code>Instance</code> provides methods to create, manage, and terminate instances.</p>"},{"location":"instances/#instance-lifecycle","title":"Instance Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; booting: launch_instance\n    booting --&gt; active\n    active --&gt; active: restart\n    active --&gt; terminating: terminate\n    terminating --&gt; terminated\n    terminated --&gt; [*]\n\n    active --&gt; unhealthy: System failure\n    unhealthy --&gt; active: restart</code></pre>"},{"location":"instances/#available-operations","title":"Available Operations","text":""},{"location":"instances/#listing-instances","title":"Listing Instances","text":"<p>Retrieve all running instances associated with your account:</p> <pre><code>from lambda_cloud import LambdaCloudClient, Instances\n\nclient = LambdaCloudClient(api_key=\"your_api_key\")\ninstances = Instances(client)\n\ninstances = instances.list_instances()\nfor instance in instances:\n    print(f\"Instance: {instance.name} ({instance.id})\")\n    print(f\"  Status: {instance.status}\")\n    print(f\"  Region: {instance.region.name}\")\n    print(f\"  Type: {instance.instance_type.name}\")\n    print(f\"  IP: {instance.ip}\")\n</code></pre>"},{"location":"instances/#getting-instance-details","title":"Getting Instance Details","text":"<p>Retrieve detailed information about a specific instance:</p> <pre><code>instance = instances.get_instance(\"INSTANCE_ID_STRING\")\n</code></pre>"},{"location":"instances/#launching-instances","title":"Launching Instances","text":"<p>Create new instances with your desired configuration:</p> <pre><code>from lambda_cloud.models.instance import InstanceLaunchRequest\nfrom lambda_cloud.models.common import PublicRegionCode\n\n# Configure the instance\nlaunch_request = InstanceLaunchRequest(\n    region_name=PublicRegionCode.US_WEST_1,\n    instance_type_name=\"gpu_1x_a10\",\n    ssh_key_names=[\"my-ssh-key\"],\n    file_system_names=[],  # Optional\n    name=\"ML Training Instance\",  # Optional\n)\n\n# Launch the instance\nresponse = instances.launch_instance(launch_request)\ninstance_ids = response.instance_ids\n</code></pre>"},{"location":"instances/#restarting-instances","title":"Restarting Instances","text":"<p>Restart one or more running instances:</p> <pre><code>from lambda_cloud.models.instance import InstanceRestartRequest\n\nrestart_request = InstanceRestartRequest(instance_ids=[\"INSTANCE_ID_STRING\"])\nresponse = instances.restart_instances(restart_request)\n</code></pre>"},{"location":"instances/#terminating-instances","title":"Terminating Instances","text":"<p>Terminate instances when they're no longer needed:</p> <pre><code>from lambda_cloud.models.instance import InstanceTerminateRequest\n\nterminate_request = InstanceTerminateRequest(instance_ids=[\"INSTANCE_ID_STRING\"])\nresponse = instances.terminate_instances(terminate_request)\n</code></pre>"},{"location":"instances/#updating-instance-details","title":"Updating Instance Details","text":"<p>Update properties of an existing instance:</p> <pre><code>from lambda_cloud.models.instance import InstanceModificationRequest\n\nupdate_request = InstanceModificationRequest(name=\"New Instance Name\")\nupdated_instance = instances.update_instance(\"INSTANCE_ID_STRING\", update_request)\n</code></pre>"},{"location":"instances/#listing-available-instance-types","title":"Listing Available Instance Types","text":"<p>Get information about available instance types and their regional availability:</p> <pre><code>instance_types = instances.list_instance_types()\n\nfor type_name, type_info in instance_types.__root__.items():\n    instance_type = type_info.instance_type\n    print(f\"{type_name}: {instance_type.description}\")\n    print(f\"  GPU: {instance_type.gpu_description}\")\n    print(f\"  Price: ${instance_type.price_cents_per_hour / 100:.2f}/hour\")\n    print(\n        f\"  Specs: {instance_type.specs.gpus}x GPUs, {instance_type.specs.vcpus} vCPUs, {instance_type.specs.memory_gib} GiB RAM\"\n    )\n    print(f\"  Available regions:\")\n    for region in type_info.regions_with_capacity_available:\n        print(f\"    - {region.name} ({region.description})\")\n</code></pre>"},{"location":"instances/#best-practices","title":"Best Practices","text":"<ol> <li>Check availability before launching: Use <code>list_instance_types()</code> to check for available capacity in your preferred region.</li> <li>Use meaningful names: Assign descriptive names to instances to make them easier to identify.</li> <li>Clean up resources: Terminate instances when they're no longer needed to avoid unnecessary charges.</li> <li>Handle errors gracefully: Implement proper error handling to manage cases like insufficient capacity.</li> </ol>"},{"location":"lambda_cloud_api/","title":"Lambda Cloud API Client","text":"<p>This Python client provides a programmatic interface to the Lambda Cloud API, enabling you to manage computing resources like instances, SSH keys, filesystems, and more.</p>"},{"location":"lambda_cloud_api/#authentication","title":"Authentication","text":"<p>The Lambda Cloud API uses API keys to authenticate requests. You'll need to generate an API key from the Lambda Cloud dashboard.</p> <pre><code>from lambda_cloud import LambdaCloudClient\n\n# Initialize the client with your API key\nclient = LambdaCloudClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"lambda_cloud_api/#available-apis","title":"Available APIs","text":"<p>The client is divided into several API interfaces, each focusing on a specific resource type:</p> <ul> <li>Instances: Manage instances (list, launch, terminate, etc.)</li> <li>SSHKeys: Manage SSH keys for instance access</li> <li>FileSystems: Manage persistent storage</li> <li>Images: List available machine images</li> <li>FirewallRules: Configure inbound network rules</li> </ul>"},{"location":"lambda_cloud_api/#architecture","title":"Architecture","text":"<pre><code>graph TD\n    Client[LambdaCloudClient] --&gt; |Provides authentication| Instances\n    Client --&gt; |Provides authentication| SSHKeys\n    Client --&gt; |Provides authentication| FileSystems\n    Client --&gt; |Provides authentication| Images\n    Client --&gt; |Provides authentication| FirewallRules\n    Instances --&gt; |Makes requests to| API[Lambda Cloud API]\n    SSHKeys --&gt; |Makes requests to| API\n    FileSystems --&gt; |Makes requests to| API\n    Images --&gt; |Makes requests to| API\n    FirewallRules --&gt; |Makes requests to| API</code></pre>"},{"location":"lambda_cloud_api/#error-handling","title":"Error Handling","text":"<p>The client raises <code>httpx.HTTPStatusError</code> when API requests fail. You can catch these exceptions to handle errors gracefully:</p> <pre><code>import httpx\nfrom lambda_cloud import LambdaCloudClient, Instances\n\nclient = LambdaCloudClient(api_key=\"your_api_key_here\")\ninstances = Instances(client)\n\ntry:\n    instances = instances.list_instances()\nexcept httpx.HTTPStatusError as e:\n    if e.response.status_code == 401:\n        print(\"Authentication failed. Check your API key.\")\n    elif e.response.status_code == 403:\n        print(\"Account inactive or insufficient permissions.\")\n    else:\n        print(f\"API request failed: {e}\")\n</code></pre>"},{"location":"lambda_cloud_api/#resource-management","title":"Resource Management","text":"<p>For optimal resource management, use the client as a context manager:</p> <pre><code>with LambdaCloudClient(api_key=\"your_api_key_here\") as client:\n    instances = Instances(client)\n    instances = instances.list_instances()\n    # The client will be automatically closed when exiting the context\n</code></pre>"},{"location":"ssh_keys/","title":"SSH Keys","text":"<p>This document details the operations available for managing SSH keys in Lambda Cloud through the Python client.</p>"},{"location":"ssh_keys/#endpoint-overview","title":"Endpoint Overview","text":"<p>The SSHKeys module provides methods for managing SSH authentication keys:</p> <ul> <li>List SSH keys in your account</li> <li>Add a new SSH key (either upload existing or generate new)</li> <li>Delete an SSH key</li> </ul>"},{"location":"ssh_keys/#ssh-key-workflow","title":"SSH Key Workflow","text":"<pre><code>graph TD\n    A[Create/Generate SSH Key] --&gt; B[Store Key in Lambda Cloud]\n    B --&gt; C[Use Key when Launching Instance]\n    C --&gt; D[SSH into Instance]\n    B --&gt; E[Delete Key if No Longer Needed]</code></pre>"},{"location":"ssh_keys/#usage-examples","title":"Usage Examples","text":""},{"location":"ssh_keys/#listing-ssh-keys","title":"Listing SSH Keys","text":"<pre><code>from lambda_cloud import LambdaCloudClient, SSHKeys\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nssh_keys = SSHKeys(client)\n\n# Get all SSH keys\nkeys = ssh_keys.list()\n\n# Display key details\nfor key in keys:\n    print(f\"Key: {key['name']} (ID: {key['id']})\")\n    print(f\"  Public Key: {key['public_key'][:30]}...\")\n</code></pre>"},{"location":"ssh_keys/#adding-an-existing-ssh-key","title":"Adding an Existing SSH Key","text":"<pre><code>from lambda_cloud import LambdaCloudClient, SSHKeys\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nssh_keys = SSHKeys(client)\n\n# Read an existing public key file\nwith open(\"~/.ssh/id_ed25519.pub\", \"r\") as f:\n    public_key_content = f.read().strip()\n\n# Add the key to Lambda Cloud\nkey = ssh_keys.add(\"my-laptop-key\", public_key=public_key_content)\n\nprint(f\"Added key: {key['name']} (ID: {key['id']})\")\n</code></pre>"},{"location":"ssh_keys/#generating-a-new-ssh-key","title":"Generating a New SSH Key","text":"<pre><code>from lambda_cloud import LambdaCloudClient, SSHKeys\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nssh_keys = SSHKeys(client)\n\n# Generate a new key\nkey = ssh_keys.add(\"new-generated-key\")\n\nprint(f\"Generated key: {key['name']} (ID: {key['id']})\")\n\n# Save the private key locally - IMPORTANT!\n# Lambda does not store the private key after generation\nwith open(\"new_key.pem\", \"w\") as f:\n    f.write(key[\"private_key\"])\n\nprint(\"Private key saved to new_key.pem\")\n\n# Set appropriate permissions on the key file\nimport os\n\nos.chmod(\"new_key.pem\", 0o400)  # Read-only by owner\n</code></pre>"},{"location":"ssh_keys/#deleting-an-ssh-key","title":"Deleting an SSH Key","text":"<pre><code>from lambda_cloud import LambdaCloudClient, SSHKeys\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nssh_keys = SSHKeys(client)\n\n# Delete a key by ID\nkey_id = \"A_KEY_ID\"\nssh_keys.delete(key_id)\n\nprint(f\"SSH key {key_id} deleted successfully\")\n</code></pre>"},{"location":"ssh_keys/#workflow-generate-key-and-launch-instance","title":"Workflow: Generate Key and Launch Instance","text":"<pre><code>from lambda_cloud import LambdaCloudClient, SSHKeys, Instances\nimport os\n\nclient = LambdaCloudClient(api_key=\"your-api-key\")\nssh_keys = SSHKeys(client)\ninstances = Instances(client)\n\n# Step 1: Generate a new key\nkey_name = \"instance-access-key\"\nkey = ssh_keys.add(key_name)\n\n# Step 2: Save the private key\nkey_file = \"instance_key.pem\"\nwith open(key_file, \"w\") as f:\n    f.write(key[\"private_key\"])\n\n# Set proper permissions\nos.chmod(key_file, 0o400)\nprint(f\"Private key saved to {key_file}\")\n\n# Step 3: Launch an instance with the new key\nresult = instances.launch(\n    region_name=\"us-west-1\", instance_type_name=\"gpu_1x_a10\", ssh_key_names=[key_name], name=\"My New Instance\"\n)\n\ninstance_id = result[\"instance_ids\"][0]\nprint(f\"Launched instance: {instance_id}\")\n\n# Step 4: Get instance details for SSH access\ninstance = instances.get(instance_id)\nip_address = instance[\"ip\"]\n\nprint(f\"You can connect to your instance using:\")\nprint(f\"ssh -i {key_file} ubuntu@{ip_address}\")\n</code></pre>"}]}